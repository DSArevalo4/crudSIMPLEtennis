#!/usr/bin/env python3
"""
Script de prueba para verificar que se han solucionado los problemas de URLs y recarga.
"""

import requests
import time
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://localhost:5000"

def test_no_url_flash():
    """Prueba que no hay parpadeo de URLs /dashboard o /login."""
    print("üîó Probando ausencia de parpadeo de URLs...")
    
    try:
        # Probar acceso a diferentes rutas
        routes = ['/', '/dashboard', '/login']
        
        for route in routes:
            response = requests.get(f"{BASE_URL}{route}", allow_redirects=True)
            
            if response.status_code == 200:
                print(f"‚úÖ Ruta {route}: Accesible sin parpadeo")
                
                # Verificar que la URL final no contiene rutas internas
                if '/dashboard' not in response.url and '/login' not in response.url:
                    print(f"   ‚úÖ URL limpia: {response.url}")
                else:
                    print(f"   ‚ùå URL no limpia: {response.url}")
                    return False
            else:
                print(f"‚ùå Ruta {route}: Error {response.status_code}")
                return False
        
        print("‚úÖ No hay parpadeo de URLs")
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando URLs: {str(e)}")
        return False

def test_session_persistence_on_reload():
    """Prueba que la sesi√≥n se mantiene al recargar."""
    print("\nüíæ Probando persistencia de sesi√≥n al recargar...")
    
    try:
        # Simular m√∫ltiples recargas de la p√°gina principal
        for i in range(5):
            response = requests.get(f"{BASE_URL}/", timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ Recarga {i+1}: P√°gina cargada correctamente")
                
                # Verificar que no redirige al login innecesariamente
                if '/login' not in response.url:
                    print(f"   ‚úÖ No redirige al login: {response.url}")
                else:
                    print(f"   ‚ùå Redirige al login innecesariamente: {response.url}")
                    return False
            else:
                print(f"‚ùå Recarga {i+1}: Error {response.status_code}")
                return False
            
            # Peque√±a pausa entre recargas
            time.sleep(0.3)
        
        print("‚úÖ Sesi√≥n se mantiene al recargar")
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando persistencia: {str(e)}")
        return False

def test_clean_urls():
    """Prueba que las URLs se mantienen limpias."""
    print("\nüßπ Probando URLs limpias...")
    
    try:
        # Probar diferentes escenarios de navegaci√≥n
        test_cases = [
            {'route': '/', 'expected': 'P√°gina principal'},
            {'route': '/dashboard', 'expected': 'Dashboard'},
            {'route': '/login', 'expected': 'Login'}
        ]
        
        for test_case in test_cases:
            response = requests.get(f"{BASE_URL}{test_case['route']}", allow_redirects=True)
            
            if response.status_code == 200:
                # Verificar que la URL final es limpia
                final_url = response.url
                if final_url.endswith('/') or final_url == BASE_URL:
                    print(f"‚úÖ {test_case['expected']}: URL limpia ({final_url})")
                else:
                    print(f"‚ùå {test_case['expected']}: URL no limpia ({final_url})")
                    return False
            else:
                print(f"‚ùå {test_case['expected']}: Error {response.status_code}")
                return False
        
        print("‚úÖ URLs se mantienen limpias")
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando URLs limpias: {str(e)}")
        return False

def test_no_redirect_loops():
    """Prueba que no hay bucles de redirecci√≥n."""
    print("\nüîÑ Probando ausencia de bucles de redirecci√≥n...")
    
    try:
        # Probar m√∫ltiples peticiones para detectar bucles
        for i in range(3):
            response = requests.get(f"{BASE_URL}/", allow_redirects=True, timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ Petici√≥n {i+1}: Sin bucles de redirecci√≥n")
            else:
                print(f"‚ùå Petici√≥n {i+1}: Posible bucle - {response.status_code}")
                return False
            
            time.sleep(0.2)
        
        print("‚úÖ No hay bucles de redirecci√≥n")
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando bucles: {str(e)}")
        return False

def test_security_headers():
    """Prueba que los headers de seguridad siguen presentes."""
    print("\nüîí Probando headers de seguridad...")
    
    try:
        response = requests.get(f"{BASE_URL}/")
        
        security_headers = [
            'X-Content-Type-Options',
            'X-Frame-Options',
            'X-XSS-Protection'
        ]
        
        found_headers = []
        for header in security_headers:
            if header in response.headers:
                found_headers.append(header)
                print(f"‚úÖ Header {header} presente")
            else:
                print(f"‚ùå Header {header} ausente")
        
        if len(found_headers) >= 2:
            print("‚úÖ Headers de seguridad configurados correctamente")
            return True
        else:
            print("‚ùå Faltan headers de seguridad importantes")
            return False
            
    except Exception as e:
        print(f"‚ùå Error probando headers: {str(e)}")
        return False

def test_performance():
    """Prueba el rendimiento de las mejoras."""
    print("\n‚ö° Probando rendimiento...")
    
    try:
        start_time = time.time()
        
        # Hacer m√∫ltiples peticiones para medir rendimiento
        for i in range(10):
            response = requests.get(f"{BASE_URL}/", timeout=5)
            if response.status_code != 200:
                print(f"‚ùå Error en petici√≥n {i+1}: {response.status_code}")
                return False
        
        end_time = time.time()
        total_time = end_time - start_time
        
        print(f"‚úÖ 10 peticiones completadas en {total_time:.2f} segundos")
        print(f"   Promedio: {total_time/10:.3f} segundos por petici√≥n")
        
        if total_time < 5:  # Menos de 5 segundos para 10 peticiones
            print("‚úÖ Rendimiento aceptable")
            return True
        else:
            print("‚ö†Ô∏è Rendimiento lento")
            return False
        
    except Exception as e:
        print(f"‚ùå Error probando rendimiento: {str(e)}")
        return False

def main():
    """Ejecuta todas las pruebas de correcci√≥n."""
    print("üöÄ Iniciando pruebas de correcci√≥n de URLs y persistencia...")
    print("=" * 70)
    
    # Verificar que el servidor est√© ejecut√°ndose
    try:
        response = requests.get(f"{BASE_URL}/", timeout=5)
        if response.status_code != 200:
            print("‚ùå Servidor no disponible. Aseg√∫rate de que est√© ejecut√°ndose en http://localhost:5000")
            return
    except requests.exceptions.RequestException:
        print("‚ùå No se puede conectar al servidor. Aseg√∫rate de que est√© ejecut√°ndose en http://localhost:5000")
        return
    
    print("‚úÖ Servidor disponible")
    print("=" * 70)
    
    # Ejecutar pruebas
    tests = [
        test_no_url_flash,
        test_session_persistence_on_reload,
        test_clean_urls,
        test_no_redirect_loops,
        test_security_headers,
        test_performance
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 70)
    print(f"üèÅ Pruebas completadas: {passed}/{total} pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! Los problemas se han solucionado.")
        print("\nüìã Resumen de correcciones:")
        print("   ‚Ä¢ No hay parpadeo de URLs /dashboard o /login")
        print("   ‚Ä¢ Sesi√≥n se mantiene al recargar la p√°gina")
        print("   ‚Ä¢ URLs se mantienen limpias")
        print("   ‚Ä¢ No hay bucles de redirecci√≥n")
        print("   ‚Ä¢ Headers de seguridad configurados")
        print("   ‚Ä¢ Rendimiento aceptable")
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisa los errores arriba.")

if __name__ == "__main__":
    main()
